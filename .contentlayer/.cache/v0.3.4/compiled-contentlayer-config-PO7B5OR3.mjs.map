{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from \"contentlayer/source-files\"\r\nimport rehypePrettyCode from \"rehype-pretty-code\"\r\nimport rehypeSlug from \"rehype-slug\"\r\nimport remarkGfm from \"remark-gfm\"\r\nimport { visit } from \"unist-util-visit\"\r\n\r\n/** @type {import('contentlayer/source-files').ComputedFields} */\r\nconst computedFields = {\r\n  slug: {\r\n    type: \"string\",\r\n    resolve: (doc) => `/${doc._raw.flattenedPath}`,\r\n  },\r\n  slugAsParams: {\r\n    type: \"string\",\r\n    resolve: (doc) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\r\n  },\r\n  readingTime: {\r\n    type: \"number\",\r\n    resolve: (doc) => {\r\n      const content = doc.body.raw\r\n      const wordsPerMinute = 200\r\n      const numberOfWords = content.split(/\\s/g).length\r\n      const minutes = numberOfWords / wordsPerMinute\r\n      return Math.ceil(minutes)\r\n    },\r\n  },\r\n}\r\n\r\nexport const Post = defineDocumentType(() => ({\r\n  name: \"Post\",\r\n  filePathPattern: `blog/**/*.mdx`,\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: \"string\",\r\n    },\r\n    date: {\r\n      type: \"date\",\r\n      required: true,\r\n    },\r\n    published: {\r\n      type: \"boolean\",\r\n      default: true,\r\n    },\r\n    image: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    authors: {\r\n      // Reference types are not embedded.\r\n      // Until this is fixed, we can use a simple list.\r\n      // type: \"reference\",\r\n      // of: Author,\r\n      type: \"list\",\r\n      of: { type: \"string\" },\r\n      required: true,\r\n    },\r\n  },\r\n  computedFields,\r\n}))\r\n\r\nexport const Author = defineDocumentType(() => ({\r\n  name: \"Author\",\r\n  filePathPattern: `authors/**/*.mdx`,\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: \"string\",\r\n    },\r\n    avatar: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    twitter: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n  },\r\n  computedFields,\r\n}))\r\n\r\nexport const Page = defineDocumentType(() => ({\r\n  name: \"Page\",\r\n  filePathPattern: `pages/**/*.mdx`,\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: \"string\",\r\n    },\r\n  },\r\n  computedFields,\r\n}))\r\n\r\nexport default makeSource({\r\n  contentDirPath: \"./content\",\r\n  documentTypes: [Post, Author, Page],\r\n  mdx: {\r\n    remarkPlugins: [remarkGfm],\r\n    rehypePlugins: [\r\n      rehypeSlug,\r\n      () => (tree) => {\r\n        visit(tree, (node) => {\r\n          if (node?.type === \"element\" && node?.tagName === \"pre\") {\r\n            const [codeEl] = node.children\r\n            if (codeEl.tagName !== \"code\") return\r\n\r\n            node.raw = codeEl.children?.[0].value\r\n          }\r\n        })\r\n      },\r\n      [\r\n        rehypePrettyCode,\r\n        {\r\n          theme: { dark: \"one-dark-pro\", light: \"github-light\" },\r\n\r\n          /**\r\n           * @param {{ children: string | any[]; }} node\r\n           */\r\n          onVisitLine(node) {\r\n            // Prevent lines from collapsing in `display: grid` mode, and allow empty\r\n            // lines to be copy/pasted\r\n            if (node.children.length === 0) {\r\n              node.children = [{ type: \"text\", value: \" \" }]\r\n            }\r\n          },\r\n          /**\r\n           * @param {{ properties: { className: string[]; }; }} node\r\n           */\r\n          onVisitHighlightedLine(node) {\r\n            node.properties.className.push(\"line--highlighted\")\r\n          },\r\n          /**\r\n           * @param {{ properties: { className: string[]; }; }} node\r\n           */\r\n          onVisitHighlightedWord(node) {\r\n            node.properties.className = [\"word--highlighted\"]\r\n          },\r\n        },\r\n      ],\r\n      () => (tree) => {\r\n        visit(tree, (node) => {\r\n          if (node?.type === \"element\" && node?.tagName === \"div\") {\r\n            if (!(\"data-rehype-pretty-code-fragment\" in node.properties)) return\r\n\r\n            for (const child of node.children) {\r\n              if (child.tagName === \"pre\") {\r\n                child.properties[\"raw\"] = node.raw\r\n              }\r\n            }\r\n          }\r\n        })\r\n      },\r\n    ],\r\n  },\r\n})\r\n"],
  "mappings": "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",
  "names": []
}
